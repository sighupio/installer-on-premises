---
- name: be sure firewalld is disabled
  systemd: name=firewalld enabled=no
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: be sure firewalld is stopped
  systemd: name=firewalld state=stopped
  ignore_errors: true
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: Set package version separator on RedHat
  set_fact:
    _pkg_sep: "-"
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: Set package version separator on Debian/Ubuntu
  set_fact:
    _pkg_sep: "="
  when: ansible_os_family == 'Debian'

- name: Set Kubernetes package version suffix on RedHat
  set_fact:
    _pkg_suffix: ""
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: Set Kubernetes package version suffix on Debian/Ubuntu
  set_fact:
    _pkg_suffix: "-*"
  when: ansible_os_family == 'Debian'

- name: Set conntrack kernel module name on Ubuntu 18
  set_fact:
    _conntrack_module_name: "nf_conntrack_ipv4"
  when: ansible_facts['distribution_major_version'] <= "18"

- name: Set conntrack kernel module name on Ubuntu 20
  set_fact:
    _conntrack_module_name: "nf_conntrack"
  when: ansible_facts['distribution_major_version'] > "18"

- name: Set conntrack kernel module name on Ubuntu 20
  set_fact:
    _conntrack_module_name: "nf_conntrack"
  when: ansible_facts['distribution'] == "Debian"

- name: Set custom kernel parameters
  block:
  - name: Dump previous values
    # Dump the current values before we change them, so the user can restore them if needed
    # This is because sysctl does not provide a way to know what is the default value for
    # a variable nor to reset it
    ansible.builtin.shell:
      cmd: "sysctl -a > {{ sysctl_dump_path }}"
      creates: "{{ sysctl_dump_path }}"
  - name: Delete old customizations
    # This is to ensure that the file we create always contains the latest customizations
    # This will be recreated in the next step
    ansible.builtin.file:
      path: "{{ sysctl_file_path }}"
      state: absent
  - name: Apply custom values
    # Create a dedicated file to hold the customizations, to persist them across reboots
    ansible.posix.sysctl:
      name: "{{ item.name }}"
      value: "{{ item.value }}"
      sysctl_set: true
      sysctl_file: "{{ sysctl_file_path }}"
    with_items: "{{ kernel_parameters }}"

# Install versionlock plugin for package management (needed regardless of repository management)
- name: Install yum-utils
  yum:
    name: yum-utils
    state: latest
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: Search for yum-plugin-versionlock
  yum:
    list: yum-plugin-versionlock
  register: package_list
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: Install yum-plugin-versionlock
  yum:
    name: yum-plugin-versionlock
    state: latest
  when: ansible_os_family in ['RedHat', 'Rocky'] and package_list.results | length != 0

- name: Search for yum-versionlock
  yum:
    list: yum-versionlock
  register: package_list
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: Install yum-versionlock
  yum:
    name: yum-versionlock
    state: latest
  when: ansible_os_family in ['RedHat', 'Rocky'] and package_list.results | length != 0

- include_tasks: "repo-Rocky-RedHat.yml"
  when: 
    - kubernetes_manage_repositories
    - ansible_os_family in ['RedHat', 'Rocky']

- include_tasks: "repo-{{ ansible_os_family }}.yml"
  when: 
    - kubernetes_manage_repositories
    - ansible_os_family in ['Debian']

- include_tasks: node.yml
