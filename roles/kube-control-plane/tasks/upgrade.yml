- name: Renew certificates
  ansible.builtin.command: "{{ item }}"
  with_items:
    - "kubeadm certs renew admin.conf"
    - "kubeadm certs renew apiserver"
    - "kubeadm certs renew apiserver-kubelet-client"
    - "kubeadm certs renew controller-manager.conf"
    - "kubeadm certs renew front-proxy-client"
    - "kubeadm certs renew scheduler.conf"

- name: Renew `super-admin.conf` certificate
  ansible.builtin.command: "kubeadm certs renew super-admin.conf"
  when: kubernetes_version is version('1.29.0', 'ge', version_type='semver')

- name: Upgrade kubernetes master with kubeadm (legacy)
  ansible.builtin.command: "kubeadm upgrade apply --config {{ kubeadm_config_file }} -y --patches {{ kubeadm_patches_path }}"
  when: kubernetes_version is version('1.30.0', 'lt', version_type='semver')

- name: Ensuring kubeadm-upgrade-config.yml config file is present on machine
  ansible.builtin.template:
    src: kubeadm-upgrade-config.yml.j2
    dest: "{{ kubeadm_upgrade_config_file }}"
  when: kubernetes_version is version('1.30.0', 'ge', version_type='semver')

- name: Upgrade kubernetes master with kubeadm
  ansible.builtin.command: kubeadm upgrade apply --config /etc/kubernetes/kubeadm-upgrade-config.yml
  when: kubernetes_version is version('1.30.0', 'ge', version_type='semver')

- name: Generate KubeletConfiguration patches file from template
  ansible.builtin.template:
    src: KubeletConfiguration-v1beta1.yml.j2
    dest: "{{ kubelet_config_path }}/patches/kubeletconfiguration.yaml"
    mode: '0644'
  changed_when: true
  notify:
    - Apply kubelet-config patches
    - Restart kubelet
    - Kubelet verifications
  when: kubernetes_version is version('1.30.0', 'ge', version_type='semver')
  
- name: Ensure all PKI and CRT files have restricted permissions
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: '0600'
  with_items:
    - /etc/kubernetes/pki/apiserver.crt
    - /etc/kubernetes/pki/apiserver-kubelet-client.crt
    - /etc/kubernetes/pki/front-proxy-client.crt
